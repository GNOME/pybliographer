import gettext

_ = gettext.gettext

from Pyblio import Config, Types, Fields

def _get_entries ():
    return Config.get ('base/entries').data.values ()

def _get_fields ():
    return Config.get ('base/fields').data.values ()


Config.define ('base',
               _("Base"),
               _("Elementary configuration"))

Config.define ('base/advertise',
               _("Advertise"),
               _("""Specify wether or not the program should add a message
               saying that the output files are generated by pybliographer"""),
               Config.Boolean ())

Config.define ('base/fields',
               _("Fields"),
               _("Existing fields"))
               

Config.define ('base/entries',
               _("Entries"),
               _("Existing entries"))

Config.define ('base/defaulttype',
               _("Default Type"),
               _("Default type for a newly created entry"),
               Config.Element (_get_entries))

Config.define ('base/lyxpipe',
               _("LyX Path"),
               _("Path to the LyX server"),
               Config.String (desc = _("Path")))

# --------------------------------------------------

# Available fields

fields = (
    ('crossref', 	_("Cross Reference"), 	_("Description")),
    ('key', 		_("Key"), 		_("Description")),
    ('author', 		_("Author"), 		_("Description")),
    ('address_1', 	_("Address 1"), 	_("Description")),
    ('address_2', 	_("Address 2"), 	_("Description")),
    ('title', 		_("Title"), 		_("Description")),
    ('specifictitle', 	_("Specific Title"), 	_("Description")),
    ('journal', 	_("Journal"), 		_("Description")),
    ('special', 	_("Special"), 		_("Description")),
    ('type', 		_("Type"), 		_("Description")),
    ('booktitle', 	_("Book Title"), 	_("Description")),
    ('subject', 	_("Subject"), 		_("Description")),
    ('ownership', 	_("Ownership"), 	_("Description")),
    ('series', 		_("Series"), 		_("Description")),
    ('editor', 		_("Editor"), 		_("Description")),
    ('edition', 	_("Edition"), 		_("Description")),
    ('volume', 		_("Volume"), 		_("Description")),
    ('number', 		_("Number"), 		_("Description")),
    ('chapter', 	_("Chapter"), 		_("Description")),
    ('pages', 		_("Pages"), 		_("Description")),
    ('school', 		_("School"), 		_("Description")),
    ('organization', 	_("Organization"), 	_("Description")),
    ('location', 	_("Location"), 		_("Description")),
    ('dates', 		_("Dates"), 		_("Description")),
    ('institution', 	_("Institution"), 	_("Description")),
    ('publisher', 	_("Publisher"), 	_("Description")),
    ('address', 	_("Address"), 		_("Description")),
    ('format', 		_("Format"), 		_("Description")),
    ('date', 		_("Date"), 		_("Description")),
    ('noseries', 	_("# Series"), 		_("Description")),
    ('confplace', 	_("Conference Place"), 	_("Description")),
    ('cote', 		_("Cote"), 		_("Description")),
    ('ieeecn', 		_("IEEECN"), 		_("Description")),
    ('locn', 		_("LoCN"), 		_("Description")),
    ('isbn', 		_("ISBN"), 		_("Description")),
    ('issn', 		_("ISSN"), 		_("Description")),
    ('note', 		_("Note"), 		_("Description")),
    ('language', 	_("Language"), 		_("Description")),
    ('howpublished', 	_("How Published"), 	_("Description")),
    ('to_appear', 	_("To Appear"), 	_("Description")),
    ('from', 		_("From"), 		_("Description")),
    ('received', 	_("Received"), 		_("Description")),
    ('owner', 		_("Owner"), 		_("Description")),
    ('keywords', 	_("Keywords"), 		_("Description")),
    ('abstract', 	_("Abstract"), 		_("Description")),
    ('remarks', 	_("Remarks"), 		_("Description")),
    ('url', 		_("URL"), 		_("Description")),
    )

entries = {
    'article' : 	(_("Article"), _(" "),
                         ('author', 'title', 'journal', 'date'),
                         ('volume', 'number', 'pages', 'note')),
    
    'book' : 		(_("Book"), _(" "),
                         ('author', 'editor', 'title', 'publisher', 'date'),
                         ( 'volume', 'number', 'series', 'address', 'edition', 'note')),
    
    'booklet' : 	(_("Booklet"), _(" "),
                         ('title',),
                         ('author', 'howpublished', 'address', 'date', 'note')),
    
    'inbook' : 		(_("In Book"), _(" "),
                         ('author', 'editor', 'title', 'chapter', 'pages', 'publisher', 'date'),
                         ('volume', 'number', 'series', 'type', 'address', 'edition', 'note')),
    
    'incollection' : 	(_("In Collection"), _(" "),
                         ('author', 'title', 'booktitle', 'publisher', 'date', ),
                         ('editor', 'volume', 'number', 'series', 'type',
                          'chapter', 'pages', 'address', 'edition',)),
    
    'inproceedings' :	(_("In Proceedings"), _(" "),
                         ('author', 'title', 'booktitle', 'date',),
                         ('editor', 'volume', 'number', 'series',
                          'pages', 'address', 'organization',
                          'publisher', 'note')),
    
    'manual' : 		(_("Manual"), _(" "), ('title',),
                         ('author', 'organization', 'address', 'edition',
                          'date', 'note',)),
    
    'mastersthesis' : 	(_("Masters Thesis"), _(" "),
                         ('author', 'title', 'school', 'date',),
                         ('type', 'address', 'note',)),
    
    'misc' : 		(_("Miscellanous"), _(" "),
                         (),
                         ('author', 'title', 'howpublished', 'date', 'note',)),
    
    'phdthesis' : 	(_("PhD Thesis"), _(" "),
                         ('author', 'title', 'school', 'date',),
                         ('type', 'address', 'note',)),
    
    'proceedings' : 	(_("Proceedings"), _(" "),
                         ('title', 'date',),
                         ('editor', 'volume', 'number', 'series',
                          'address', 'publisher', 'note',
                          'organization',)),
    
    'techreport' : 	(_("Technical Report"), _(" "),
                         ('author', 'title', 'institution', 'date',),
                         ('type', 'number', 'address', 'note',)),
    
    'unpublished' : 	(_("Unpublished"), _(" "),
                         ('author', 'title', 'note',),
                         ('date',)),
    }


Config.set ('base/lyxpipe', '~/.lyx/lyxpipe')

# --------------------------------------------------

desc = {}
# create the hash table
for f in fields:
    desc [f [0]] = Types.FieldDescription (name = f [0],
                                           real = f [1],
                                           desc = f [2])
    
# Special fields

desc ['author'].type   = Fields.AuthorGroup
desc ['editor'].type   = Fields.AuthorGroup
desc ['date'].type     = Fields.Date
desc ['crossref'].type = Fields.Reference
desc ['url'].type      = Fields.URL

Config.set ('base/fields', desc)

# Entry types
def _set_entries (entries):
    desc = Config.get ('base/fields').data
    ent  = {}
    
    for e in entries.keys ():

        value = entries [e]
        d = Types.EntryDescription (name = e,
                                    real = value [0],
                                    desc = value [1])

        d.mandatory = map (lambda x, desc=desc: desc [x], value [2])
        d.optional  = map (lambda x, desc=desc: desc [x], value [3])
        
        ent [e] = d

    Config.set ('base/entries', ent)
    return

_set_entries (entries)

Config.set ('base/defaulttype',
            Config.get ('base/entries').data ['article'])

Config.set ('base/advertise', 1)



